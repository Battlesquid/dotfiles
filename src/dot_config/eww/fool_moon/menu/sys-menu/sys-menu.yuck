(defwidget sys-menu-main[]
  (box :class "menu sys-menu"
       :orientation "v"
       :space-evenly false
    (user)
    (sep)
    (panel)
    (media)
    (sliders)
    (powermenu)))

(defwidget user[] 
  (box :class "user"
       :space-evenly false
        :orientation "v"
        :halign "center"
    (box :class "user-pfp" :halign "center" :valign "center" :style "background-image: url('assets/pfp.png');") 
    (box :class "user-details"
         :orientation "v"
         :space-evenly false
         :valign "center"
      (label :class "user-name" :halign "center" :text uname)
      (label :class "user-uptime" :halign "center" :text uptime-val)))) 

(defpoll uname :interval "1h" "echo $USER")
(defpoll uptime-val :interval "30s" "uptime -p")

(defwidget panel[]
  (box :class "panel"
       :spacing 15
       :space-evenly false
    (stats)
    (sys-btns)))

(defwidget stats[]
  (box :class "stats"
       :spacing 15
    (v-iconmeter :name "ram" :active false :min 0 :max 101 :val ram-val :icon "")
    (v-iconmeter :name "cpu" :active false :min 0 :max 101 :val cpu-val :icon "")
    (v-iconmeter :name "dsk" :active false :min 0 :max 101 :val dsk-val :icon "")))

(defpoll ram-poll :interval "1s" "scripts/stats ram")
(deflisten ram-val "scripts/stats follow ram")

(defpoll cpu-poll :interval "1s" "scripts/stats cpu")
(deflisten cpu-val "scripts/stats follow cpu")

(defpoll dsk-poll :interval "1s" "scripts/stats dsk")
(deflisten dsk-val "scripts/stats follow dsk")

(defwidget sys-btns[]
  (box :class "sys-btns"
       :orientation "v"
       :hexpand true
       :spacing 15
    (box :class "row"
         :spacing 15
      (button :class "wifi ${wifi-class}" :timeout "5s" :onclick "scripts/sys toggle-wifi" "")
      (button :class "air" :timeout "5s" :onclick "scripts/sys toggle-air" air-icon)
      (button :class "dnd" :timeout "5s" :onclick "scripts/sys toggle-dnd" dnd-icon))
    (box :class "row"
         :spacing 15
      (button :class "night" :onclick "scripts/sys toggle-night" "${night-icon}")
      (button :class "scr" :onclick "scripts/sys screenshot" "")
      (button :class "blue" :onclick "scripts/sys blue" ""))))

(defpoll wifi-class :interval "1s" "scripts/sys wifi-class")
(defpoll air-icon :interval "1s" "scripts/sys air-icon")
(defpoll dnd-icon :interval "1s" "scripts/sys dnd-icon")
(defpoll night-icon :interval "1s" "scripts/sys night-icon")

(defwidget media[]
  (box :class "media"
       :orientation "v"
    (box :class "media-controls"
         :orientation "h"
         :space-evenly false
      (box :class "media-overview"
           :orientation "v"
           :hexpand true
        (label :class "media-title" :halign "start" :limit-width 15 :text media-title)
        (label :class "media-artist" :halign "start" :text media-artist)
        (label :class "media-time" :halign "start" :valign "end" :text media-time))
      (box :class "media-playback"
           :orientation "v"
           :halign "end"
        (button :class "media-prev" :onclick "scripts/media prev" "")
        (button :class "media-toggle ${media-toggle-class}" :onclick "scripts/media toggle" media-toggle-icon)
        (button :class "media-next" :onclick "scripts/media next" "")))))

(defpoll media-title :interval "1s" "scripts/media title")
(defpoll media-artist :interval "1s" "scripts/media artist")
(defpoll media-time :interval "1s" "scripts/media time")
(deflisten media-toggle-icon "scripts/media icon")
(deflisten media-toggle-class "scripts/media class")

(defwidget sliders[]
  (box :class "sliders"
       :orientation "v"
       :spacing 15
    (h-iconmeter :name "vol" :min 0 :max 101 :val vol-val :icon vol-icon :iwidth 45
                 :onclick "../common/scripts/vol toggle-mute" 
                 :onchange "../common/scripts/vol set {}")
    (h-iconmeter :name "mic" :min 0 :max 101 :val mic-val :icon mic-icon :iwidth 45
                 :onclick "../common/scripts/mic toggle-mute" 
                 :onchange "../common/scripts/mic set {}")
    (h-iconmeter :name "bright" :min 0 :max 101 :val bright-val :icon "" :iwidth 45
                 :onchange "../common/scripts/bright set {}")))

(deflisten vol-val :initial 0 "../common/scripts/vol follow")
(defpoll vol-icon  :initial "" :interval "1s" "../common/scripts/vol icon")

(deflisten mic-val :initial 0 "../common/scripts/mic follow")
(defpoll mic-icon :interval "1s" "../common/scripts/mic icon")

(deflisten bright-val :initial 0 "../common/scripts/bright follow")

(defwidget powermenu[]
  (box :class "powermenu"
    (button :class "power-lock" :onclick "slock" :tooltip "Lock" "")
    (button :class "power-exit" :onclick "bspc quit" :tooltip "Exit BSPWM" "")
    (button :class "power-reboot" :onclick "reboot" :tooltip "Restart" "")
    (button :class "power-shutdown" :onclick "shutdown" :tooltip "Shutdown" "")))

(defwindow sys-menu 
  :monitor 0
  :geometry (geometry :x "10px" :y "60px" :width "384px" :anchor "top left")
  :windowtype "dock"
  :wm-ignore false
  (sys-menu-main))

